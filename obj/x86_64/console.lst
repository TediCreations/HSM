GAS LISTING /tmp/ccRV8JvS.s 			page 1


   1              		.file	"console.c"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text.console_init,"ax",@progbits
   6              	console_init:
   7              	.LFB50:
   8              		.file 1 "src/console.c"
   1:src/console.c **** ï»¿/******************************************************************************
   2:src/console.c **** 	Code
   3:src/console.c **** ******************************************************************************/
   4:src/console.c **** 
   5:src/console.c **** /******************************************************************************
   6:src/console.c **** 	Include files
   7:src/console.c **** ******************************************************************************/
   8:src/console.c **** 
   9:src/console.c **** #include "console.h"
  10:src/console.c **** 
  11:src/console.c **** #include <stdio.h>
  12:src/console.c **** #include <stdint.h>
  13:src/console.c **** #include <string.h>
  14:src/console.c **** 
  15:src/console.c **** /******************************************************************************
  16:src/console.c **** 	Definitions
  17:src/console.c **** ******************************************************************************/
  18:src/console.c **** 
  19:src/console.c **** static char g_str[ 1000 ];
  20:src/console.c **** 
  21:src/console.c **** /******************************************************************************
  22:src/console.c **** 	Local function declarations
  23:src/console.c **** ******************************************************************************/
  24:src/console.c **** /**
  25:src/console.c ****  * \brief Waits until it reads a string from the console.
  26:src/console.c ****  * 
  27:src/console.c ****  * \return The string.
  28:src/console.c ****  */
  29:src/console.c **** static char* getString( void )
  30:src/console.c **** {
  31:src/console.c ****     if( scanf( "%s", g_str ) != 1 )
  32:src/console.c ****     {
  33:src/console.c **** 		/* It failed make it empty*/
  34:src/console.c **** 		strcpy( g_str, "" );//TODO: check if robust
  35:src/console.c ****     }
  36:src/console.c **** 
  37:src/console.c **** 	return g_str;
  38:src/console.c **** }
  39:src/console.c **** 
  40:src/console.c **** /**
  41:src/console.c ****  * \brief Writes a string to the console
  42:src/console.c ****  *  
  43:src/console.c ****  * \param[in]	s		The string
  44:src/console.c ****  */
  45:src/console.c **** static void putString( const char* s )
  46:src/console.c **** {
  47:src/console.c **** 	printf( "%s", s );
  48:src/console.c **** }
  49:src/console.c **** 
  50:src/console.c **** /**
GAS LISTING /tmp/ccRV8JvS.s 			page 2


  51:src/console.c ****  * \brief Writes an integer number to the console.
  52:src/console.c ****  *  
  53:src/console.c ****  * \param[in]	num		The number.
  54:src/console.c ****  */
  55:src/console.c **** static void putNum( const int32_t num )
  56:src/console.c **** {
  57:src/console.c **** 	printf( "%i", num );
  58:src/console.c **** }
  59:src/console.c **** 
  60:src/console.c **** /**
  61:src/console.c ****  * \brief Initializes the console.
  62:src/console.c ****  *  
  63:src/console.c ****  * \param[in]	obj		The console object.
  64:src/console.c ****  */
  65:src/console.c **** static void console_init( console_t* obj )
  66:src/console.c **** {
   9              		.loc 1 66 0
  10              		.cfi_startproc
  11              	.LVL0:
  67:src/console.c **** 	obj->gets = getString;
  12              		.loc 1 67 0
  13 0000 48C70700 		movq	$getString, (%rdi)
  13      000000
  68:src/console.c **** 	obj->puts = putString;
  14              		.loc 1 68 0
  15 0007 48C74708 		movq	$putString, 8(%rdi)
  15      00000000 
  69:src/console.c **** 	obj->putNum = putNum;
  16              		.loc 1 69 0
  17 000f 48C74710 		movq	$putNum, 16(%rdi)
  17      00000000 
  18 0017 C3       		ret
  19              		.cfi_endproc
  20              	.LFE50:
  22              		.section	.rodata.str1.1,"aMS",@progbits,1
  23              	.LC0:
  24 0000 257300   		.string	"%s"
  25              		.section	.text.putString,"ax",@progbits
  27              	putString:
  28              	.LFB48:
  46:src/console.c **** 	printf( "%s", s );
  29              		.loc 1 46 0
  30              		.cfi_startproc
  31              	.LVL1:
  32 0000 4883EC08 		subq	$8, %rsp
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35 0004 4889FA   		movq	%rdi, %rdx
  36              	.LVL2:
  37              	.LBB8:
  38              	.LBB9:
  39              		.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
   1:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** /* Checking macros for stdio functions.
   2:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Copyright (C) 2004-2016 Free Software Foundation, Inc.
   3:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    This file is part of the GNU C Library.
   4:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
   5:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is free software; you can redistribute it and/or
GAS LISTING /tmp/ccRV8JvS.s 			page 3


   6:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    modify it under the terms of the GNU Lesser General Public
   7:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License as published by the Free Software Foundation; either
   8:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    version 2.1 of the License, or (at your option) any later version.
   9:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  10:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    The GNU C Library is distributed in the hope that it will be useful,
  11:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  13:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    Lesser General Public License for more details.
  14:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  15:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    You should have received a copy of the GNU Lesser General Public
  16:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    License along with the GNU C Library; if not, see
  17:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****    <http://www.gnu.org/licenses/>.  */
  18:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  19:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifndef _STDIO_H
  20:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # error "Never include <bits/stdio2.h> directly; use <stdio.h> instead."
  21:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  22:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  23:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  24:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...) __THROW;
  25:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
  26:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format,
  27:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   _G_va_list __ap) __THROW;
  28:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  29:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #ifdef __va_arg_pack
  30:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  31:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
  32:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  33:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  34:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				  __bos (__s), __fmt, __va_arg_pack ());
  35:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  36:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #elif !defined __cplusplus
  37:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # define sprintf(str, ...) \
  38:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___sprintf_chk (str, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  39:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   __VA_ARGS__)
  40:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  41:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  42:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  43:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsprintf (char *__restrict __s, const char *__restrict __fmt,
  44:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 _G_va_list __ap))
  45:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  46:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
  47:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __ap);
  48:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  49:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  50:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if defined __USE_ISOC99 || defined __USE_UNIX98
  51:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  52:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
  53:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   size_t __slen, const char *__restrict __format,
  54:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   ...) __THROW;
  55:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
  56:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    size_t __slen, const char *__restrict __format,
  57:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    _G_va_list __ap) __THROW;
  58:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  59:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  60:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  61:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (snprintf (char *__restrict __s, size_t __n,
  62:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		 const char *__restrict __fmt, ...))
GAS LISTING /tmp/ccRV8JvS.s 			page 4


  63:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  64:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  65:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				   __bos (__s), __fmt, __va_arg_pack ());
  66:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  67:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # elif !defined __cplusplus
  68:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #  define snprintf(str, len, ...) \
  69:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   __builtin___snprintf_chk (str, len, __USE_FORTIFY_LEVEL - 1, __bos (str), \
  70:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			    __VA_ARGS__)
  71:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # endif
  72:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  73:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  74:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __NTH (vsnprintf (char *__restrict __s, size_t __n,
  75:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 		  const char *__restrict __fmt, _G_va_list __ap))
  76:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  77:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __builtin___vsnprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
  78:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 				    __bos (__s), __fmt, __ap);
  79:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
  80:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  81:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #endif
  82:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  83:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** #if __USE_FORTIFY_LEVEL > 1
  84:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  85:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
  86:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  const char *__restrict __format, ...);
  87:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __printf_chk (int __flag, const char *__restrict __format, ...);
  88:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
  89:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			   const char *__restrict __format, _G_va_list __ap);
  90:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** extern int __vprintf_chk (int __flag, const char *__restrict __format,
  91:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			  _G_va_list __ap);
  92:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
  93:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** # ifdef __va_arg_pack
  94:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
  95:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
  96:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
  97:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  98:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 			__va_arg_pack ());
  99:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** }
 100:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** 
 101:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** __fortify_function int
 102:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** printf (const char *__restrict __fmt, ...)
 103:/usr/include/x86_64-linux-gnu/bits/stdio2.h **** {
 104:/usr/include/x86_64-linux-gnu/bits/stdio2.h ****   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  40              		.loc 2 104 0
  41 0007 BE000000 		movl	$.LC0, %esi
  41      00
  42 000c BF010000 		movl	$1, %edi
  42      00
  43              	.LVL3:
  44 0011 B8000000 		movl	$0, %eax
  44      00
  45 0016 E8000000 		call	__printf_chk
  45      00
  46              	.LVL4:
  47              	.LBE9:
  48              	.LBE8:
  48:src/console.c **** 
  49              		.loc 1 48 0
GAS LISTING /tmp/ccRV8JvS.s 			page 5


  50 001b 4883C408 		addq	$8, %rsp
  51              	.LCFI1:
  52              		.cfi_def_cfa_offset 8
  53 001f C3       		ret
  54              		.cfi_endproc
  55              	.LFE48:
  57              		.section	.rodata.str1.1
  58              	.LC1:
  59 0003 256900   		.string	"%i"
  60              		.section	.text.putNum,"ax",@progbits
  62              	putNum:
  63              	.LFB49:
  56:src/console.c **** 	printf( "%i", num );
  64              		.loc 1 56 0
  65              		.cfi_startproc
  66              	.LVL5:
  67 0000 4883EC08 		subq	$8, %rsp
  68              	.LCFI2:
  69              		.cfi_def_cfa_offset 16
  70 0004 89FA     		movl	%edi, %edx
  71              	.LVL6:
  72              	.LBB10:
  73              	.LBB11:
  74              		.loc 2 104 0
  75 0006 BE000000 		movl	$.LC1, %esi
  75      00
  76 000b BF010000 		movl	$1, %edi
  76      00
  77              	.LVL7:
  78 0010 B8000000 		movl	$0, %eax
  78      00
  79 0015 E8000000 		call	__printf_chk
  79      00
  80              	.LVL8:
  81              	.LBE11:
  82              	.LBE10:
  58:src/console.c **** 
  83              		.loc 1 58 0
  84 001a 4883C408 		addq	$8, %rsp
  85              	.LCFI3:
  86              		.cfi_def_cfa_offset 8
  87 001e C3       		ret
  88              		.cfi_endproc
  89              	.LFE49:
  91              		.section	.text.getString,"ax",@progbits
  93              	getString:
  94              	.LFB47:
  30:src/console.c ****     if( scanf( "%s", g_str ) != 1 )
  95              		.loc 1 30 0
  96              		.cfi_startproc
  97 0000 4883EC08 		subq	$8, %rsp
  98              	.LCFI4:
  99              		.cfi_def_cfa_offset 16
  31:src/console.c ****     {
 100              		.loc 1 31 0
 101 0004 BE000000 		movl	$g_str, %esi
 101      00
GAS LISTING /tmp/ccRV8JvS.s 			page 6


 102 0009 BF000000 		movl	$.LC0, %edi
 102      00
 103 000e B8000000 		movl	$0, %eax
 103      00
 104 0013 E8000000 		call	__isoc99_scanf
 104      00
 105              	.LVL9:
 106 0018 83F801   		cmpl	$1, %eax
 107 001b 7407     		je	.L7
 108              	.LVL10:
 109 001d C6050000 		movb	$0, g_str(%rip)
 109      000000
 110              	.LVL11:
 111              	.L7:
  38:src/console.c **** 
 112              		.loc 1 38 0
 113 0024 B8000000 		movl	$g_str, %eax
 113      00
 114 0029 4883C408 		addq	$8, %rsp
 115              	.LCFI5:
 116              		.cfi_def_cfa_offset 8
 117 002d C3       		ret
 118              		.cfi_endproc
 119              	.LFE47:
 121              		.section	.text.console_build,"ax",@progbits
 122              		.globl	console_build
 124              	console_build:
 125              	.LFB51:
  70:src/console.c **** }
  71:src/console.c **** 
  72:src/console.c **** /******************************************************************************
  73:src/console.c **** 	Function definitions
  74:src/console.c **** ******************************************************************************/
  75:src/console.c **** 
  76:src/console.c **** /**
  77:src/console.c ****  * \brief Builds the console and provides a handler.
  78:src/console.c ****  *  
  79:src/console.c ****  * \return	The console object.
  80:src/console.c ****  */
  81:src/console.c **** console_t console_build( void )
  82:src/console.c **** {
 126              		.loc 1 82 0
 127              		.cfi_startproc
 128              	.LVL12:
 129 0000 53       		pushq	%rbx
 130              	.LCFI6:
 131              		.cfi_def_cfa_offset 16
 132              		.cfi_offset 3, -16
 133 0001 4883EC20 		subq	$32, %rsp
 134              	.LCFI7:
 135              		.cfi_def_cfa_offset 48
 136 0005 4889FB   		movq	%rdi, %rbx
 137              		.loc 1 82 0
 138 0008 64488B04 		movq	%fs:40, %rax
 138      25280000 
 138      00
 139 0011 48894424 		movq	%rax, 24(%rsp)
GAS LISTING /tmp/ccRV8JvS.s 			page 7


 139      18
 140 0016 31C0     		xorl	%eax, %eax
  83:src/console.c **** 	console_t aux;
  84:src/console.c **** 	console_init( &aux );
 141              		.loc 1 84 0
 142 0018 4889E7   		movq	%rsp, %rdi
 143              	.LVL13:
 144 001b E8000000 		call	console_init
 144      00
 145              	.LVL14:
  85:src/console.c **** 	return aux;
 146              		.loc 1 85 0
 147 0020 488B0424 		movq	(%rsp), %rax
 148 0024 488903   		movq	%rax, (%rbx)
 149 0027 488B4424 		movq	8(%rsp), %rax
 149      08
 150 002c 48894308 		movq	%rax, 8(%rbx)
 151 0030 488B4424 		movq	16(%rsp), %rax
 151      10
 152 0035 48894310 		movq	%rax, 16(%rbx)
  86:src/console.c **** }
 153              		.loc 1 86 0
 154 0039 488B5424 		movq	24(%rsp), %rdx
 154      18
 155 003e 64483314 		xorq	%fs:40, %rdx
 155      25280000 
 155      00
 156 0047 7405     		je	.L10
 157 0049 E8000000 		call	__stack_chk_fail
 157      00
 158              	.LVL15:
 159              	.L10:
 160 004e 4889D8   		movq	%rbx, %rax
 161 0051 4883C420 		addq	$32, %rsp
 162              	.LCFI8:
 163              		.cfi_def_cfa_offset 16
 164 0055 5B       		popq	%rbx
 165              	.LCFI9:
 166              		.cfi_def_cfa_offset 8
 167              	.LVL16:
 168 0056 C3       		ret
 169              		.cfi_endproc
 170              	.LFE51:
 172              		.section	.bss.g_str,"aw",@nobits
 173              		.align 32
 176              	g_str:
 177 0000 00000000 		.zero	1000
 177      00000000 
 177      00000000 
 177      00000000 
 177      00000000 
 178              		.text
 179              	.Letext0:
 180              		.file 3 "src/console.h"
 181              		.file 4 "/usr/include/stdint.h"
 182              		.file 5 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 183              		.file 6 "/usr/include/x86_64-linux-gnu/bits/types.h"
GAS LISTING /tmp/ccRV8JvS.s 			page 8


 184              		.file 7 "/usr/include/libio.h"
 185              		.file 8 "/usr/include/x86_64-linux-gnu/bits/string3.h"
 186              		.file 9 "/usr/include/stdio.h"
GAS LISTING /tmp/ccRV8JvS.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 console.c
     /tmp/ccRV8JvS.s:6      .text.console_init:0000000000000000 console_init
     /tmp/ccRV8JvS.s:93     .text.getString:0000000000000000 getString
     /tmp/ccRV8JvS.s:27     .text.putString:0000000000000000 putString
     /tmp/ccRV8JvS.s:62     .text.putNum:0000000000000000 putNum
     /tmp/ccRV8JvS.s:176    .bss.g_str:0000000000000000 g_str
     /tmp/ccRV8JvS.s:124    .text.console_build:0000000000000000 console_build

UNDEFINED SYMBOLS
__printf_chk
__isoc99_scanf
__stack_chk_fail
